# -*- coding: utf-8 -*-
"""HEBO_on_BBOB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XftMKU7-tWj0cdWjH7XsfiDPBIKXAWZk
"""

import hebo
import ioh
import numpy

ioh_logger = ioh.logger.Analyzer(
  [ioh.logger.trigger.ALWAYS],
  additional_properties = [
    # ioh.logger.property.EVALUATIONS,
    # ioh.logger.property.RAWY,
    ioh.logger.property.RAWYBEST,
    ioh.logger.property.TRANSFORMEDY,
    ioh.logger.property.TRANSFORMEDYBEST,
    # ioh.logger.property.CURRENTBESTY,
    # ioh.logger.property.CURRENTY,
    # ioh.logger.property.PENALTY,
    # ioh.logger.property.VIOLATION,
  ],
  algorithm_name = "HEBO",
  folder_name = "HEBO",
  root = "HEBO_on_BBOB",
)

# WARNING: The initial states of the tool to generate random numbers are NOT fixed within these parameters.
BBOB_SEARCH_SPACE_LOWER_BOUND = -5
BBOB_SEARCH_SPACE_UPPER_BOUND = 5
num_variables_list = [60]
fids = [1]
instances = [0]
num_runs = 10
run_budget = 80
total_num_runs = num_runs * len(instances) * len(fids) * len(num_variables_list)
run_index = 0
for fid in fids:
  for instance in instances:
    for num_variables in num_variables_list:
      for run_index in range(num_runs):
        bbob_problem = ioh.get_problem(
          fid = fid,
          instance = instance,
          dimension = num_variables,
        )
        bbob_problem.attach_logger(ioh_logger)

        hebo_space = hebo.design_space.design_space.DesignSpace().parse([
          {
            'name': f'x{variable_index}',
            'type': 'num',
            'lb': BBOB_SEARCH_SPACE_LOWER_BOUND,
            'ub': BBOB_SEARCH_SPACE_UPPER_BOUND,
          }
          for variable_index in range(num_variables)
        ])

        hebo_optimizer = hebo.optimizers.hebo.HEBO(hebo_space)
        for i in range(run_budget):
          recommendations_DataFrame = hebo_optimizer.suggest(n_suggestions = 1)
          recommendations_list = recommendations_DataFrame.iloc[0].tolist()
          recommendation = numpy.array([bbob_problem(recommendations_list)])
          hebo_optimizer.observe(recommendations_DataFrame, recommendation)

        run_index += 1
        print(f"Done: {run_index}/{total_num_runs:,}")
